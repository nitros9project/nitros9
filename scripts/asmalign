#! /usr/bin/env python3

import io
import argparse
import sys

# parameters

opcodesWithoutOperands = [
    'abx',
    'asla', 'aslb', 'asld', 'aslq',
    'asra', 'asrb', 'asrd', 'asrq',
    'break',
    'clra', 'clrb', 'clrd', 'comd', 'clre', 'clrf', 'clrw', 'clrq',
    'coma', 'comb', 'comd', 'come', 'comf', 'comw', 'comq',
    'daa',
    'deca', 'decb', 'dece', 'decf', 'decw', 'sync',
    'inca', 'incb', 'incd', 'ince', 'incf', 'incw',
    'log',
    'lsla', 'lslb', 'lsld', 'lsle', 'lslf', 'lslq',
    'lsra', 'lsrb', 'lsrd', 'lsre', 'lsrf', 'lsrq',
    'mul',
    'nega', 'negb', 'negd', 'nege', 'negf', 'negw', 'negq',
    'rti', 'rts',
    'rola', 'rolb', 'rold', 'rolw',
    'rora', 'rorb', 'rord', 'rorw',
    'sex', 'sexw', 'swi', 'swi2', 'swi3',
    'tsta', 'tstb', 'tstd', 'tste', 'tstf', 'tstw', 'tstq',
    # psedu-ops
    'ifp1', 'else', 'endc'
]

pseudoOpcodes = ['ifp1', 'ifgt', 'iflt', 'ifge', 'ifle', 'ifeq', 'ifne',
    'ifdef', 'else', 'endc', 'macro', 'endm', 'struct', 'ends'
]

opcodesWithFullLines = [
    'ttl'
]

opcodesWithStrings = [
    'fcc', 'fcs', 'fcn', 'fcz'
]

def isEmptyLine(l):
    l.strip()
    if len(l) == 0:
        return True
    else:
        return False

def isComment(l):
    if l[0] == '*' or l[0] == ';':
        return True
    else:
        return False

def hasLabel(l):
    result = False
    if len(l) > 0 and not l[0].isspace():
        result = True
    return result

def buildStringOperand(l, op):
    dchar = ''
    sstr = ''
    idx = l.index(op) # skip to the start of the operand
#    sys.stderr.write('starting operand: "' + str(op) + "\"\n")

# lwasm version
    if idx < len(l) and not l[idx].isspace():
        dchar = l[idx] # get first delimiting char
        # we're assuming there's a matching delimiter
        end = idx + l[idx+1:].index(dchar) + 2

        # if there's a trailing comma, we add the comma to the operand and loop
        if end < len(l) and l[end] == ',':
            end += 1
            while end < len(l) and not l[end].isspace():
                end += 1

        sstr = l[idx:end]

    return sstr

def showLine(label, opcode, operand, comment, opcodeCol, operandCol, commentCol):
    if label == "" and opcode == "" and operand == "":
        l = comment
    else:
        l = label
        if opcode != "":
            if opcodeCol > 1: l = l.ljust(opcodeCol-2)
            l = " ".join([l,opcode]);
        if operand != "":
            if operandCol > 1: l = l.ljust(operandCol-2)
            l = " ".join([l,operand]);
        if comment != "":
            if commentCol > 1: l = l.ljust(commentCol-2)
            l = " ".join([l,comment]);
    print(l)

def processLine(args, l):
    line = ""
    label = ""
    opcode = ""
    operand = ""
    comment = ""
    dirs = args.dirs

    opcodeCol = args.opcode
    operandCol = args.operand
    commentCol = args.comment

    l = l.rstrip('\n')
    if isEmptyLine(l) == True:
        comment = ""
    elif isComment(l) == True:
        comment = l
    else:
        tokens = l.split()
        startIndex = 0
        if hasLabel(l) == True:
            # the next token will be a label
            label = tokens[startIndex]
            startIndex = startIndex + 1
        # the first token will be the opcode
        if len(tokens) > startIndex:
            opcode = tokens[startIndex]
            # if the opcode is in the pseudo-op table, indent it less and make it uppercase
            if opcode.lower() in pseudoOpcodes:
#                opcode = opcode.upper()
                if dirs:
                    opcodeCol -= 2
                    operandCol -= 2

            # if there's a second token AND the first token takes an operand, the second token is an operand
            if len(tokens) > startIndex + 1 and opcode.lower() not in opcodesWithoutOperands:
                operand = tokens[startIndex + 1]
                if len(tokens) > startIndex + 2:
                    if opcode.lower() in opcodesWithStrings:
                        operand = buildStringOperand(l, operand)

                        comment = l[(l.index(operand)+len(operand)):].strip()
                    elif opcode.lower() in opcodesWithFullLines:
                        operand = l.split(None, startIndex + 1)[startIndex + 1]
                    else:
                        comment = l.split(None, startIndex + 2)[startIndex + 2]
                else:
                    comment = ""
            else:
                if len(tokens) > startIndex + 1:
                    comment = l.split(None, startIndex + 1)[startIndex + 1]

    showLine(label, opcode, operand, comment, opcodeCol, operandCol, commentCol)

parser = argparse.ArgumentParser(description='Reformat 6x09 assembly language by inserting space between fields. Indenting is controlled by specifying field positions. The label, opcode, operand, and comment are kept in order and separated by at least one space. Columns are numbered started with one.')

parser.add_argument('-d', "--directive", help="unindent directives two spaces", dest='dirs', default=False, action='store_true')

parser.add_argument('-o', "--opcode", metavar='N', help="opcode starting column", dest='opcode', type=int, default=21)

parser.add_argument('-p', "--operand", metavar='N', help="operand starting column", dest='operand', type=int, default=31)

parser.add_argument('-c', "--comment", metavar='N', help="comment starting column", dest='comment', type=int, default=51)

parser.add_argument('filename', nargs='?', metavar='FILE', help="file to process (stdin used if not given or '-')") # positional argument

args = parser.parse_args()

sys.stdin.reconfigure(encoding='cp850')
sys.stdout.reconfigure(encoding='cp850')

if args.filename == '-' or args.filename == None:
    for line in sys.stdin:
        processLine(args, line)
else: # Using the 'with' statement ensures that the file is properly closed after its suite finishes.
    with open(args.filename, 'r', encoding='cp850') as file:
        for line in file:
            processLine(args, line)
