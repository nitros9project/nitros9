#! /usr/bin/env python3

import io
import argparse
import sys

# parameters
stripWhiteSpaceAtEnd = True

opcodesWithoutOperands = [
    'abx',
    'asla', 'aslb', 'asld', 'aslq',
    'asra', 'asrb', 'asrd', 'asrq',
    'break',
    'clra', 'clrb', 'clrd', 'comd', 'clre', 'clrf', 'clrw', 'clrq',
    'coma', 'comb', 'comd', 'come', 'comf', 'comw', 'comq',
    'daa',
    'deca', 'decb', 'dece', 'decf', 'decw', 'sync',
    'inca', 'incb', 'incd', 'ince', 'incf', 'incw',
    'log',
    'lsla', 'lslb', 'lsld', 'lsle', 'lslf', 'lslq',
    'lsra', 'lsrb', 'lsrd', 'lsre', 'lsrf', 'lsrq',
    'mul',
    'nega', 'negb', 'negd', 'nege', 'negf', 'negw', 'negq',
    'rti', 'rts',
    'rola', 'rolb', 'rold', 'rolw',
    'rora', 'rorb', 'rord', 'rorw',
    'sex', 'sexw', 'swi', 'swi2', 'swi3',
    'tsta', 'tstb', 'tstd', 'tste', 'tstf', 'tstw', 'tstq',
    # psedu-ops
    'ifp1', 'else', 'endc'
]

pseudoOpcodes = ['ifp1', 'ifgt', 'iflt', 'ifge', 'ifle', 'ifeq', 'ifne',
    'ifdef', 'else', 'endc', 'macro', 'endm', 'struct', 'ends'
]

opcodesWithFullLines = [
    'ttl'
]

opcodesWithStrings = [
    'fcc', 'fcs', 'fcn', 'fcz'
]

def isEmptyLine(l):
    l.strip()
    if len(l) == 0:
        return True
    else:
        return False

def isComment(l):
    if l[0] == '*' or l[0] == ';':
        return True
    else:
        return False

def hasLabel(l):
    result = False
    if len(l) > 0 and not l[0].isspace():
        result = True
    return result

def buildStringOperand(l, op):
    dchar = ''
    sstr = ''
    idx = l.index(op) # skip to the start of the operand
#    sys.stderr.write('starting operand: "' + str(op) + "\"\n")

# lwasm version
    if idx < len(l) and not l[idx].isspace():
        dchar = l[idx] # get first delimiting char
        # we're assuming there's a matching delimiter
        end = idx + l[idx+1:].index(dchar) + 2

        # if there's a trailing comma, we add the comma to the operand and loop
        if end < len(l) and l[end] == ',':
            end += 1
            while end < len(l) and not l[end].isspace():
                end += 1

        sstr = l[idx:end]

    return sstr

def showLine(label, opcode, operand, comment, labelWidth, opcodeWidth, operandWidth, instrWidth, debug):
    if debug == True:
        line = [label, opcode, operand, comment]
    else:
        if label == "" and opcode == "" and operand == "":
            line = comment
        elif instrWidth:
            if opcode.lower() in opcodesWithoutOperands:
                instr = opcode
            else:
                instr = opcode + " " + operand
            formatString = f"{label:<{labelWidth}} {instr:<{instrWidth}} {comment:<{0}}"
            line = formatString
        else:
            formatString = f"{label:<{labelWidth}} {opcode:<{opcodeWidth}} {operand:<{operandWidth}} {comment:<{0}}"
            line = formatString
    if stripWhiteSpaceAtEnd == True:
        line = line.rstrip()
    print(line)

def processLine(args, l):
    line = ""
    label = ""
    opcode = ""
    operand = ""
    comment = ""
    instrWidth = args.instr
    nodirs = args.nodirs
    labelWidth = args.label - 1
    opcodeWidth = args.opcode - 1
    operandWidth = args.operand - 1

    if instrWidth != None and instrWidth > 2: instrWidth -= 1

    l = l.rstrip('\n')
    if isEmptyLine(l) == True:
        comment = ""
    elif isComment(l) == True:
        comment = l
    else:
        tokens = l.split()
        startIndex = 0
        if hasLabel(l) == True:
            # the next token will be a label
            label = tokens[startIndex]
            startIndex = startIndex + 1
        # the first token will be the opcode
        if len(tokens) > startIndex:
            opcode = tokens[startIndex]
            # if the opcode is in the pseudo-op table, indent it less and make it uppercase
            if opcode.lower() in pseudoOpcodes:
#                opcode = opcode.upper()
                if not nodirs:
                    labelWidth -= 2
                    opcodeWidth -=2
                    operandWidth -= 2

                    if labelWidth < 1: labelWidth = 1
                    if opcodeWidth < 1: opcodeWidth = 1
                    if operandWidth < 1: operandWidth = 1;

            # if there's a second token AND the first token takes an operand, the second token is an operand
            if len(tokens) > startIndex + 1 and opcode.lower() not in opcodesWithoutOperands:
                operand = tokens[startIndex + 1]
                if len(tokens) > startIndex + 2:
                    if opcode.lower() in opcodesWithStrings:
                        operand = buildStringOperand(l, operand)

                        comment = l[(l.index(operand)+len(operand)):].strip()
                    elif opcode.lower() in opcodesWithFullLines:
                        operand = l.split(None, startIndex + 1)[startIndex + 1]
                    else:
                        comment = l.split(None, startIndex + 2)[startIndex + 2]
                else:
                    comment = ""
            else:
                if len(tokens) > startIndex + 1:
                    comment = l.split(None, startIndex + 1)[startIndex + 1]

    showLine(label, opcode, operand, comment, labelWidth, opcodeWidth, operandWidth, instrWidth, False)

parser = argparse.ArgumentParser(description='Reformat 6x09 assembly language input')

parser.add_argument('-l', "--label-width", metavar='N', help="Minimum width of label", dest='label', type=int, default=20)

parser.add_argument('-i', "--instruction-width", metavar='N', help="Width of instruction (overrides opcode, operand)", dest='instr', type=int, default=None)

parser.add_argument('-n', "--no-pseudo", help="Disable unindenting directives", dest='nodirs', default=False, action='store_true')

parser.add_argument('-o', "--opcode-width", metavar='N', help="Width of the opcode", dest='opcode', type=int, default=10)

parser.add_argument('-p', "--operand-width", metavar='N', help="Width of the operand", dest='operand', type=int, default=10)

parser.add_argument('filename', nargs='?', metavar='FILE', help="File to process (stdin used if not given or '-')") # positional argument

args = parser.parse_args()

sys.stdin.reconfigure(encoding='cp850')
sys.stdout.reconfigure(encoding='cp850')

if args.filename == '-' or args.filename == None:
    for line in sys.stdin:
        processLine(args, line)
else: # Using the 'with' statement ensures that the file is properly closed after its suite finishes.
    with open(args.filename, 'r', encoding='cp850') as file:
        for line in file:
            processLine(args, line)
